#!/usr/bin/python -O
# pylint: disable=invalid-name

"""burgaur - A delicious AUR helper. Made from cower.

Burgaur is an AUR helper based on and strictly a superset of cower. It
automates of boring tasks that in cower you need to do by hand, like
updating all your AUR system packages or installing a new package from
AUR including its dependencies.

It doesn't try to be everything (i.e. like yaourt). Instead, it simple
assume that there is already a better tool to do some job and only
tries to complement other tools.
"""

import argparse
import glob
import os
import re
import subprocess
import sys
import tempfile
from distutils.spawn import find_executable
from shutil import rmtree
from textwrap import dedent

# termcolor function dummies
dummy_colored = lambda x, color=None, on_color=None, attrs=None: x
dummy_cprint = lambda x, color=None, on_color=None, attrs=None, **kwargs: \
               print(x, **kwargs)
try:
    from termcolor import colored, cprint
except ImportError:
    print("python-termcolor is not installed, no color support.",
          file=sys.stderr)
    colored = dummy_colored
    cprint = dummy_cprint


__author__ = "Thiago Kenji Okada"
__license__ = "MIT"
__version__ = "2.2"
__maintainer__ = "Thiago Kenji Okada"
__email__ = "thiago DOT mast3r AT gmail DOT com"
__status__ = "Stable"


# Class definitions
class BurgaurError(Exception):

    """Generic Burgaur exception, used by Burgaur class"""

    pass


class Burgaur(object):

    """Main burgaur class

    Keyword arguments:
    pacman_path -- path to pacman (default: pacman)
    makepkg_path -- path to makepkg (default: makepkg)
    cower_path -- path to cower (default: cower)
    fm_path -- path to file manager (default: mc)
    encoding -- system encoding from LANG environmental variable
    (default: utf8)
    tempdir -- location of temporary directory used to build packages.
    "None" means default Python location, see tempfile.tempdir for
    details (default: None)
    cower_raw_options -- extra arguments to use by default when
    running cower. WARNING: there is no sanity checking, this may
    break things (default: None)
    noinstall -- do not install packages after build. If True
    assume nodelete=True too (default: False)
    nodelete -- do not remove temporary directory after build
    (default: False)
    noconfirm -- skip interactive prompts during install process;
    WARNING: possibly unsafe (default: False)
    """

    def __init__(self, pacman_path="pacman", makepkg_path="makepkg",
                 cower_path="cower", fm_path="mc", sudo_path="sudo",
                 encoding="utf8", tempdir=None, cower_raw_options=None,
                 noinstall=False, nodelete=False, nobuild=False,
                 noconfirm=False):
        self.pacman_path = pacman_path
        self.makepkg_path = makepkg_path
        self.cower_path = cower_path
        self.fm_path = fm_path
        self.sudo_path = sudo_path
        self.encoding = encoding
        self.tempdir = tempdir
        self.cower_cmd = [self.cower_path]
        if cower_raw_options:
            self.cower_cmd += cower_raw_options
        if nobuild:
            self.nobuild = True
            self.noinstall = True
            self.nodelete = True
        elif noinstall:
            self.nobuild = False
            self.install = True
            self.nodelete = True
        else:
            self.nobuild = False
            self.noinstall = False
            self.nodelete = nodelete
        self.noconfirm = noconfirm

    def check_updates(self):
        """Check available updates for AUR packages.

        In case of sucess it returns a list of strings with each
        package that can be updated or None if there is no update
        available. In case of error it force exit with return code 1,
        including a user friendly message.

        Raises a BurgaurError in case of error.
        """
        cmd = self.cower_cmd + ["--color=never", "--update", "--quiet"]
        process = subprocess.Popen(cmd, stdout=subprocess.PIPE)
        out = process.communicate()[0]

        # cower will exit with a non-zero status if and only if updates are
        # available. See url below for details.
        # https://github.com/falconindy/cower/blob/master/README.pod
        if not process.returncode == 0:
            packages = out.decode(encoding=self.encoding).split("\n")[:-1]
            return packages
        else:
            return None

    def force_update(self, *targets):
        """Force update of packages from AUR with target(s) name(s).

        The user case of this function is to update VCS packages. For
        example, you could pass target="-git", and since the majority
        of Git packages on AUR finishes with "-git" prefix it would
        try to update all of them.

        Since it's difficult to know if VCS packages are up-to-date
        or not unless we build it and try to install, please doesn't
        expect any intelligence from using this function.

        target -- a package name, may be partial match
        """
        cmd = [self.pacman_path, "--query",
               "--foreign", "--quiet",
               "--color", "never"]
        installed_packages = subprocess.check_output(cmd)
        installed_packages = installed_packages.decode(encoding=self.encoding)
        installed_packages = installed_packages.split("\n")[:-1]

        packages_to_update = []
        for target in targets:
            filtered_packages = [x for x in installed_packages
                                 if x.find(target) >= 0]
            packages_to_update += filtered_packages

        if packages_to_update:
            print("Packages to update:", end=" ")
            print_info(", ".join(packages_to_update))

            self.make_install(*packages_to_update, install_deps=True)
        else:
            print_warn("No packages with target(s) {} found."
                       .format(", ".join(targets)))

    def make_install(self, *packages, install_deps=False):
        """Download, make and install packages.

        This function creates a temporary directory, downloads a
        package to it using 'cower -d' and make/install the package
        using 'makepkg -si' command.

        Keyword arguments:
        packages -- desired packages to be installed (must match a
        package name on AUR)
        install_deps -- use cower '-dd' instead of only '-d' to
        download AUR dependencies and install them before the main
        package (default: False)
        """
        target_dirs = []
        target_dir = None
        try:
            for package in packages:
                target_dir = self._download_package(package, install_deps)
                target_dirs.append(target_dir)
            for target_dir in target_dirs:
                self._review_package(target_dir)
            for target_dir in target_dirs:
                self._build_install_package(target_dir)
            success = True
        except:
            # Only preserve temporary directory in case of error (so the user
            # may try to fix the problem manually)
            success = False
            # Need to re-raise here, so we can get any error that may
            # be caused by the functions above.
            raise
        finally:
            if self.nodelete:
                return
            for target_dir in target_dirs:
                if success or self.noconfirm:
                    delete = True
                    print_info("Removing {} directory.".format(target_dir))
                else:
                    delete = query_yes_no("Remove {} directory?"
                                          .format(target_dir), "yes")
                if delete:
                    rmtree(target_dir)

    def system_update(self):
        """Updates all AUR packages that have updates."""
        packages = self.check_updates()
        if packages:
            print("Packages to update:", end=" ")
            print_info(", ".join(packages))
            self.make_install(*packages, install_deps=True)
        else:
            print_ok("All packages are up-to-date.")

    def search_package(self, target):
        """Search and returns packages that matches target.

        This function uses 'cower -s target' to search packages that
        matches a certain target, parse cower output and returns a
        list of dictionaries containing info about all found packages.

        Each dictionary contains the following keys: category, name,
        version, description, maintainer and votes. For now this info
        is hard-coded but it may be dynamically generated in the
        future.

        Keyword arguments:
        target -- target for 'cower -s target'
        """
        package_info = ["name", "version", "description",
                        "maintainer", "votes", "out_of_date"]
        # output: package^_1.0.0^_package description^_maintainer^_123^_no\n
        # \x1f is ASCII's unit separator, so it should be safe to parse
        cmd = self.cower_cmd + ["--format=%n\x1f%v\x1f%d\x1f%m\x1f%o\x1f%t\n",
                                "--color=never",
                                "--search", target]
        process = subprocess.Popen(cmd,
                                   stdout=subprocess.PIPE,
                                   stderr=subprocess.PIPE)
        out, err = process.communicate()
        if err:
            raise BurgaurError("error while searching for target {}"
                               .format(target))

        result = []
        packages = out.decode(self.encoding).split("\n")[:-1]
        for package in packages:
            entry = zip(package_info, package.split("\x1f"))
            result.append(dict(entry))
        return result

    def search_install(self, target):
        """Search target, display packages that match it and install
        them.

        This function searches the target on AUR, display all results
        to the user in a enumerated way and ask user which ones it
        should install.

        There isn't many sanity checks of the user input. The user may
        install the same package twice, for example.

        Keyword arguments:
        target -- target to search on AUR
        """
        packages = self.search_package(target)
        if not packages:
            print_warn("No packages with target {} found.".format(target))
            return

        for i, package in enumerate(packages, start=1):
            position = colored(str(i) + ")", attrs=["bold"])
            category = colored("aur/", "magenta", attrs=["bold"])
            name = colored(package["name"], attrs=["bold"])
            maintainer = "by " + colored(package["maintainer"], "yellow",
                                         attrs=["bold"])
            if package["out_of_date"] == "no":
                version = colored(package["version"], "green", attrs=["bold"])
            else:
                version = colored(package["version"], "red", attrs=["bold"])
            votes = "(" + package["votes"] + ")"
            description = "\n    " + package["description"]
            # I know this seems to be a pretty bad way to format a string,
            # but there are too many different colors here so we need to
            # improvise.
            print(position, category + name, maintainer, version, votes,
                  description)

        selected_index = parse_int_from_input("Select packages (use comma to "
                                              "select multiple packages, "
                                              "dash for ranges): ")

        if selected_index:
            selected_packages = []
            for index in selected_index:
                if index < 1:
                    raise ValueError("invalid zero/negative value")
                selected_packages.append(packages[index - 1]["name"])
            self.make_install(*selected_packages, install_deps=True)
        else:
            print_warn("No package selected.")

    def view_in_fm(self, package, directory="."):
        """"View package contents with an user selected File Manager.

        Returns True if user viewed package in mc or False if not.

        Keyword arguments:
        package -- package name
        directory -- directory to open in mc (default: ".")
        """
        if self.fm_path:  # only runs if fm is installed, otherwise ignore it
            query = query_yes_no("Do you want to view package {} contents "
                                 "in file manager?".format(package),
                                 default="yes")
            if query:
                subprocess.call([self.fm_path, directory])
            return query
        else:
            print_warn("File manager is not installed, skipping "
                       "package {} checks.".format(package))
            return False

    def _download_package(self, package, install_deps=False):
        """Download package to temporary directory

        Returns directory that the package was downloaded.

        Keyword arguments:
        package -- target package to download.
        install_deps -- download package dependencies too
        (default: False)
        """
        target_dir = tempfile.mkdtemp(prefix="burgaur-{}-".format(package),
                dir=self.tempdir)
        cower_cmd = self.cower_cmd + ["--download", package,
                                      "--target", target_dir]
        if install_deps:
            cower_cmd += ["--download"]

        try:
            subprocess.check_call(cower_cmd)
        except subprocess.CalledProcessError:
            raise BurgaurError("cower failed to download {} or its "
                               "depedencies".format(package))
        return target_dir

    def _review_package(self, target_dir):
        """Review package (and it's dependencies) using a File Manager

        Keyword arguments:
        target_dir -- directory containing package.
        """
        os.chdir(target_dir)
        for package_dir in list_dirs_by_ctime(reverse=True):
            os.chdir(package_dir)
            if not self.noconfirm:
                # Until user answer "No" we keep asking for view in mc.
                # This is similar to what yaourt does, and is more secure.
                while True:
                    answer = self.view_in_fm(package_dir)
                    if not answer:
                        break
            os.chdir(target_dir)

    def _build_install_package(self, target_dir):
        """Build package and install (including dependencies)

        Keyword arguments:
        target_dir -- directory containing package.
        """
        makepkg_cmd = [self.makepkg_path, "--syncdeps"]
        pacman_cmd = [self.sudo_path, self.pacman_path,
                      "--upgrade", "--nodeps"]
        if self.noconfirm:
            pacman_cmd += ["--noconfirm"]
        os.chdir(target_dir)
        for package_dir in list_dirs_by_ctime(reverse=True):
            os.chdir(package_dir)
            try:
                if not self.nobuild:
                    subprocess.check_call(makepkg_cmd)
                if not self.noinstall:
                    # We ignore errors during install since the user may
                    # choose to not install package (and pacman return
                    # non-zero exit code in this case).
                    subprocess.call(pacman_cmd + glob.glob("*.pkg*"))
            except subprocess.CalledProcessError:
                raise BurgaurError("error while trying to build package {}"
                                   .format(package_dir))
            os.chdir(target_dir)


# Auxiliary functions
def print_info(text, **kwargs):
    """Print bold text"""
    cprint(text, attrs=["bold"], **kwargs)


def print_ok(text, **kwargs):
    """Print bold green text"""
    cprint(text, "green", attrs=["bold"], **kwargs)


def print_warn(text, **kwargs):
    """Print bold yellow text"""
    cprint(text, "yellow", attrs=["bold"], file=sys.stderr, **kwargs)


def print_error(text, **kwargs):
    """Print bold red text"""
    cprint(text, "red", attrs=["bold"], file=sys.stderr, **kwargs)


def query_yes_no(question, default=None):
    """Ask a yes/no question via input() and return their answer.

    Return True in case of "yes" and False in case of "no".

    Modified version from http://stackoverflow.com/a/3041990, rewrite
    some parts to be more Pythonic.

    Keyword arguments:
    question -- string present to the user
    default -- default answer if the user just hits enter; None doesn't
    assume anything (default: None).
    """
    valid = {"yes": True, "y": True,
             "no": False, "n": False}
    if default is None:
        prompt = " [y/n] "
    elif default == "yes":
        prompt = " [Y/n] "
    elif default == "no":
        prompt = " [y/N] "
    else:
        raise ValueError("invalid default answer: {}".format(default))

    while True:
        question = "{}{}".format(colored(question, attrs=["bold"]), prompt)
        print(question, end="")
        choice = input().lower()
        try:
            if choice:
                return valid[choice]
            else:
                return valid[default]
        except KeyError:
            print_warn("Please respond with (y)es or (n)o.")


def parse_int_from_input(prompt=None):
    """Ask input from user, tries to parse input for integers.

    User may pass only one value ("1"), multiple values separated by
    comma ("1,2,5") or a range of values separated by dash ("2-8") or
    any combination of above ("1-2,3").

    Keyword arguments:
    prompt -- prompt from input() function (default: None)
    """
    exclude_regex = re.compile(r"[^0-9,-]")
    find_regex = re.compile(r"([0-9]+-[0-9]+)|(-?[0-9]+)")
    while True:
        result = []
        user_input = input(colored(prompt, attrs=["bold"]))
        # If user entered any invalid character, the exclude_regex will
        # match something
        if not exclude_regex.search(user_input):
            found_items = find_regex.findall(user_input)
            for item in found_items:
                if item[0]:
                    i, j = item[0].split("-")
                    result += list(range(int(i), int(j) + 1))
                if item[1]:
                    result.append(int(item[1]))
            break
        else:
            print_warn("Invalid value. Please enter a number. You may enter "
                       "multiple values using comma (i.e.: 1,2,3) or a range "
                       "of values using dash (i.e.: 1-3).")
    return result


def list_dirs_by_ctime(reverse=False):
    """Return files in directory ordered by ctime

    Keyword arguments:
    reverse -- returns decrescent order
    """
    files = os.listdir()
    files.sort(key=lambda x: os.path.getctime(x), reverse=reverse)
    return files


def print_format_or_exc(err):
    """Print error formatted or stack trace if in debug mode.

    Keyword arguments:
    err -- error message from exception
    """
    if __debug__:
        import traceback
        traceback.print_exc()
    else:
        print_error(str(err).capitalize() + ".")


def _disable_termcolor():
    """Disable termcolor by replacing termcolor functions with dummies."""
    # pylint: disable=global-statement
    global colored, cprint
    colored = dummy_colored
    cprint = dummy_cprint


# main() and auxiliary functions
def _argparser():
    """Print and parse arguments"""
    program_name = os.path.basename(sys.argv[0]).title()
    url = "http://www.retrojunkie.com/asciiart/food/burgers.htm"
    python_version = sys.version_info[:3]
    version_info = dedent(
        r'''
                          {0}
                 _....----"""----...._
              .-'  o    o    o    o   '-.
             /  o    o    o         o    \
            /     o      o   o     o    o \
          _|   o   o    o      o  o     o  |_
         / `''-----.................-----''` \
         \___________________________________/
           \~`-`.__.`-~`._.~`-`~.-~.__.~`-`/
            \                             /
             `-._______________________.-'
        ASCII art from: {1}
        {2} {3} is proudly served by Python {4}.{5}.{6}.'''.
        format(__version__, url, program_name, __version__, *python_version)
    )

    formatter_class = argparse.RawTextHelpFormatter
    description = "A delicious AUR helper. Made from cower."
    parser = argparse.ArgumentParser(description=description,
                                     formatter_class=formatter_class)
    parser.add_argument("--cower-raw-options", nargs=argparse.REMAINDER,
                        default=[], help="pass arguments directly to cower"
                        "\nWARNING: no sanity check, may break things")
    parser.add_argument("--noconfirm", action="store_true",
                        help="skip confirmation prompts during install process"
                        "\nWARNING: may be unsafe")
    parser.add_argument("--nodelete", action="store_true",
                        help="do not remove temporary build directory after"
                        "\ninstall")
    parser.add_argument("--noinstall", action="store_true",
                        help="do not install packages after build"
                        "\nassume '--nodelete'")
    parser.add_argument("--nobuild", action="store_true",
                        help="do not build packages"
                        "\nassume '--nodelete' and '--noinstall'")
    parser.add_argument("-c", "--color", metavar="WHEN", action="store",
                        default="auto",
                        help="use colored output. WHEN is 'never', 'always'"
                        "\nor 'auto' (default)")
    parser.add_argument("--version", action="version", version=version_info)
    update = parser.add_argument_group("update")
    update.add_argument("-fu", "--force-update", metavar="TARGET",
                        nargs="+", default=[],
                        help="update TARGET unconditionally")
    update.add_argument("-su", "--system-update", action="store_true",
                        help="update all AUR packages")
    install = parser.add_argument_group("install")
    install.add_argument("-mi", "--make-install", metavar="PACKAGE",
                         nargs="+", default=[],
                         help="make and install package from AUR including"
                         "\ndependencies")
    install.add_argument("-si", "--search-install", metavar="TARGET",
                         help="list all packages with target name and let"
                         "\nuser choose which ones to install")
    return parser


def main():
    """Main program function"""
    # pylint: disable=broad-except, too-many-locals, too-many-branches
    parser = _argparser()
    if len(sys.argv) == 1:
        parser.print_usage()
        sys.exit(1)
    args = parser.parse_args()

    color = args.color.lower()
    if color == "always":
        pass
    elif color == "never":
        _disable_termcolor()
    else:
        # "auto" or anything else
        if not sys.stdout.isatty():
            _disable_termcolor()
        if not color == "auto":
            print_warn("Invalid option --color={}. Assuming "
                       "--color=auto.".format(color))

    # Get executable paths and some important environmental vars
    pacman_path = find_executable("pacman")
    makepkg_path = find_executable("makepkg")
    cower_path = find_executable("cower")
    sudo_path = find_executable("sudo")
    encoding = os.getenv("LANG", ".utf8")
    if "." not in encoding:
        print_error("Your environment variable \"LANG\" is set to \"{}\" "
                    "which is not a valid encoding. "
                    "See https://wiki.archlinux.org/index.php/locale on how "
                    "to set a valid locale.".format(encoding))
        sys.exit(1)
    encoding = encoding.split(".")[1]
    # In Arch Linux, /tmp is mounted as tmpfs. It would be a bad idea to
    # compile big packages completely on RAM, so by default we use /var/tmp.
    # The user may overrides this setting by setting BURGAUR_TARGET_DIR.
    tempdir = os.getenv("BURGAUR_TARGET_DIR", "/var/tmp")
    file_manager = os.getenv("BURGAUR_FILE_MANAGER", "mc")
    fm_path = find_executable(file_manager)

    # Sanity checks
    if os.geteuid() == 0:
        print_error("You should run {} as a non-root user."
                    .format(sys.argv[0]))
        sys.exit(1)
    if not sudo_path:
        print_error("Could not find sudo installed. Please install it first.")
    if not pacman_path:
        print_error("Could not find pacman installed. Are you using "
                    "Arch Linux?")
    if not makepkg_path:
        print_error("Could not find makepkg installed. Are you using "
                    "Arch Linux?")
    if not cower_path:
        cower_url = "https://aur.archlinux.org/packages/cower/"
        print_error("Could not find cower installed. Install it from {}."
                    .format(cower_url))

    # Initialize main class
    burgaur = Burgaur(pacman_path, makepkg_path, cower_path, fm_path,
                      sudo_path, encoding, tempdir, args.cower_raw_options,
                      args.noinstall, args.nodelete, args.nobuild,
                      args.noconfirm)

    try:
        if args.system_update:
            burgaur.system_update()
        if args.search_install:
            burgaur.search_install(args.search_install)
        if args.force_update:
            burgaur.force_update(*args.force_update)
        if args.make_install:
            burgaur.make_install(*args.make_install, install_deps=True)
    except KeyboardInterrupt:
        print_error("\nUser cancelled operation.")
        sys.exit(1)
    except Exception as err:
        print_format_or_exc(err)
        sys.exit(1)


if __name__ == "__main__":
    main()

# vim: ts=8 et sw=4 sts=4
